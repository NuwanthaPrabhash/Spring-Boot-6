package com.nuwantha.springboot.securityConfigurations.service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Service
public class JWTService {

    private String secretKey = "";

    /**
     * this will create a new key every time you create an object.
     * We can get do this key generating every time you request for it also
     */
    public JWTService() {
        try {
            KeyGenerator autoGeneratedKey = KeyGenerator.getInstance("HmacSHA256");
            SecretKey sk = autoGeneratedKey.generateKey();
            secretKey = Base64.getEncoder().encodeToString(sk.getEncoded());
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    public String generateToken(String username) {

        Map<String, Object> claims = new HashMap<>();

        return Jwts.builder()
                .claims()
                .add(claims)
                .subject(username)
                .issuedAt(new Date(System.currentTimeMillis()))
//                .expiration(new Date(System.currentTimeMillis() + 60 * 60 * 5)) // 5 hours
                .expiration(new Date(System.currentTimeMillis() + 1000 * 60 * 2)) // 2 min
                .and()
                .signWith(getSecureKey())
                .compact();
    }

//    /**
//     * Enhance your JWTService to generate and validate refresh tokens, which have a longer expiration time than the regular JWT token.
//     * @param username logged username
//     * @return refresh token
//     */
//    public String generateRefreshToken(String username) {
//
//        Map<String, Object> claims = new HashMap<>();
//
//        return Jwts.builder()
//                .claims()
//                .add(claims)
//                .subject(username)
//                .issuedAt(new Date(System.currentTimeMillis()))
//                .expiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24)) // 24 hours
//                .and()
//                .signWith(getSecureKey())
//                .compact();
//    }

    private SecretKey getSecureKey() {
        byte [] keyBytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public String extractUsername(String token) {
        /**
         * To get the username we have to extract from claims. username is a part of claim
         */
        return extractClaim(token, Claims :: getSubject);
    }

    private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {
        final Claims claims = extractAllClaims(token);
        return claimResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser()
                .verifyWith(getSecureKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }

    public boolean validateToken(String token, UserDetails userDetails) {
        final String userName = extractUsername(token);

//        if (isTokenExpired(token)) {
//            throw new JwtTokenExpiredException("JWT token is expired");
//        }
//        return userName.equals(userDetails.getUsername());
        return (userName.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

//    public boolean validateRefreshToken(String refreshToken, UserDetails userDetails) {
//        final String userName = extractUsername(refreshToken);
//        return userName.equals(userDetails.getUsername()) && !isTokenExpired(refreshToken);
//    }

    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }


}
